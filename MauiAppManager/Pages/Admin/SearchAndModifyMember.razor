@page "/searchAndModifyMember"

@using System.Data
@using Database
@using ORM
@using MauiAppManager.Data
@using System.Text.RegularExpressions
@inject NavigationManager navigationManager

<h3>Search And Modify</h3>

<table class="table table-striped">
	<tbody>
		<tr>
			<th>Search By</th>
			<td>
				<select class="form-control" @bind="selectedSearchOption">
					<option value="Name">Name</option>
					<option value="ID">ID</option>
				</select>
			</td>
			<td colspan="4"><input type="text" class="form-control" @bind="inputText" placeholder="" /></td>
			<td><button type="button" class="btn btn-primary btn-info" @onclick="SearchBooks" disabled="@string.IsNullOrWhiteSpace(inputText)">Search</button></td>
			<td><button type="button" class="btn btn-primary btn-info" @onclick="BackToMainAdmin">Back</button></td>

		</tr>
	</tbody>
</table>

<table class="table table-striped">
	<thead>
		<tr>
			<th>ID</th>
			<th>First Name</th>
			<th>Last Name</th>
			<th>Phone Number</th>
			<th>Email</th>
			<th>Street</th>
			<th>City</th>
			<th>Province</th>

		</tr>

	</thead>
	<tbody>
		@foreach (var member in searchResults)
		{
			<tr>
				<td >@member.Id_member</td>
				<td>
					@member.Fname_m
				</td>
				<td>
					@member.Lname_m
				</td>

				<td>
					@if (IsEditing)
					{
						<input type="text" @bind="member.Phone_m" class="form-control" minlength="10" maxlength="10" />
					}
					else
					{
						@member.Phone_m
					}
				</td>
				<td>
					@if (IsEditing)
					{
						<input type="text" class="form-control" @bind="member.Email_m" />
					}
					else
					{
						@member.Email_m
					}
				</td>
				<td>
					@if (IsEditing)
					{
						<input type="text" class="form-control" @bind="member.Street_m" />
					}
					else
					{
						@member.Street_m
					}
				</td>
				<td>
					@if (IsEditing)
					{
						<input type="text" class="form-control" @bind="member.City_m" />
					}
					else
					{
						@member.City_m
					}
				</td>
				<td>
					@if (IsEditing)
					{
						<input type="text" class="form-control" readonly @bind="member.Province_m" />
						<select name="editMemberProv" @bind="member.Province_m">
							<option value="AB">AB</option>
							<option value="BC">BC</option>
							<option value="NB">NB</option>
							<option value="NL">NL</option>
							<option value="NT">NT</option>
							<option value="NS">NS</option>
							<option value="NU">NU</option>
							<option value="ON">ON</option>
							<option value="PE">PE</option>
							<option value="QC">QC</option>
							<option value="SK">SK</option>
							<option value="YT">YT</option>
						</select>
					}
					else
					{
						@member.Province_m
					}
				</td>
				<td>
					@if (IsEditing)
					{
						<button type="button" class="btn btn-primary btn-info" @onclick="() => SaveEdit(member)">Save</button>
						<button type="button" class="btn btn-primary btn-info" @onclick="() => CancelEdit(member)">Cancel</button>
					}
					else
					{
						<button type="button" class="btn btn-primary btn-info" @onclick="() => StartEditing(member)">Edit</button>
						<button type="button" class="btn btn-primary btn-info" @onclick="() => DeleteMem(member)">Delete</button>
					}
				</td>


			</tr>
		}

	</tbody>
</table>

@code {
	/// <summary>
	/// This page is for editing members information. 
	/// Users (administrator) can search member by name or id, and click the edit button or the delete button to operate the functions.
	/// </summary>

	private string selectedSearchOption = "ID";
	private string inputText;
	private bool IsEditing{ get; set; }
	private int EditedPhoneNumber;
	private string EditedEmail;


	public List<Member> searchResults = new List<Member>();
	private List<Category> categories;
	private Member member;

	public async void SearchBooks()
	{
		if (!string.IsNullOrEmpty(selectedSearchOption) && !string.IsNullOrEmpty(inputText))
		{
			searchResults = await DBManager.SearchMembersBy(selectedSearchOption, inputText);
			StateHasChanged();
		}

	}
		
	private async Task StartEditing(Member member)
	{
		IsEditing = true;
		if (int.TryParse(member.Phone_m, out int parsedPhoneNumber))
		{
			EditedPhoneNumber = parsedPhoneNumber;
		}
		else
		{
			// Handle invalid phone number input
		}

		EditedEmail = member.Email_m;

	}

	public async Task ApplyChanges(Member member)
	{
		if (EditedPhoneNumber.ToString().Length != 10)
		{
			// Display an error message or handle the invalid phone number
			return;
		}

		IsEditing = false;
		member.Phone_m = EditedPhoneNumber.ToString();
		member.Email_m = EditedEmail;

		await DBManager.UpdateMemberInfo(member);
		SearchBooks(); // Refresh the search results after updating the member info
	}

	//Save Edit Member
	public async Task SaveEdit(Member member)
	{

		bool phoneFormat = int.TryParse(member.Phone_m, out int result);
		bool emailFormat = Regex.IsMatch(member.Email_m, @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9._]+[a-zA-Z]{2,}$") ? true : false;
		try
		{
			if (member.Phone_m.Length == 10 && phoneFormat && emailFormat) // if both phone number and email formats are correct
			{
				await DBManager.UpdateMember(member.Phone_m, member.Email_m, member.Street_m, member.City_m, member.Province_m, member.Id_member); // information will be updated
				await App.Current.MainPage.DisplayAlert("Success", $"{member.Fname_m} {member.Lname_m}'s information updated successfully.", "Done");
				IsEditing = false;
			}
			else if ((member.Phone_m.Length != 10 || !phoneFormat) && emailFormat) // only for phone number format error
			{
				await App.Current.MainPage.DisplayAlert("Error", "Error: Phone number should be 10 digits.", "Done");
			}
			else if ((!emailFormat) && (member.Phone_m.Length != 10 || !phoneFormat)) // only for email format error
			{
				await App.Current.MainPage.DisplayAlert("Error", "Error: Email's format error.", "Done");
			}
			else if ((member.Phone_m.Length != 10 || !phoneFormat) && !emailFormat)  // for both phone number and email error
			{
				await App.Current.MainPage.DisplayAlert("Error", "Error: Please check phone number and email formats.", "Done");
			}
			else
			{
				throw new Exception();
			}
		}
		catch(Exception ex) // if email are same as others, will show this error. (Because email should be unique)
		{
			await App.Current.MainPage.DisplayAlert("Error", $"Error: {ex.Message}", "Done");
		}
	}
	// Cancel editing member, the change will not be saved.
	public void CancelEdit(Member member)
	{
		searchResults = new List<Member>(); // searching result will be clear
		inputText = null; //searching area will be clear
		navigationManager.NavigateTo("searchAndModifyMember");
		IsEditing = false; // editing area will be invisible
	}

	public void BackToMainAdmin()
	{
		navigationManager.NavigateTo("mainAdmin");
	}

	// Delete member
	public async Task DeleteMem(Member member)
	{
		try
		{
			await DBManager.DeleteMember(member.Id_member); // delete the member in database
			await App.Current.MainPage.DisplayAlert("Success", $"(ID: {member.Id_member}) Member: {member.Fname_m} {member.Lname_m} has been deleted.", "Done");
			IsEditing = false; // editing area will be invisible
			searchResults = new List<Member>();
			inputText = null; //searching area will be clear
		}
		catch (Exception ex) // if the member hasn't returned book or they have any reserved book, administrator cannot delete this member.
		{
			await App.Current.MainPage.DisplayAlert("Error", $"This member might hasn't returned books or has reserved books.\nError: {ex.Message}", "Done");
		}
	}
}
